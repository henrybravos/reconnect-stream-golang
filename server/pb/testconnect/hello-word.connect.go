// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: hello-word.proto

package testconnect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	http "net/http"
	test "pb/test"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// HelloServiceName is the fully-qualified name of the HelloService service.
	HelloServiceName = "stream.HelloService"
)

// HelloServiceClient is a client for the stream.HelloService service.
type HelloServiceClient interface {
	HelloWord(context.Context, *connect_go.Request[test.HelloRequest]) (*connect_go.ServerStreamForClient[test.HelloResponse], error)
}

// NewHelloServiceClient constructs a client for the stream.HelloService service. By default, it
// uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewHelloServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) HelloServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &helloServiceClient{
		helloWord: connect_go.NewClient[test.HelloRequest, test.HelloResponse](
			httpClient,
			baseURL+"/stream.HelloService/HelloWord",
			opts...,
		),
	}
}

// helloServiceClient implements HelloServiceClient.
type helloServiceClient struct {
	helloWord *connect_go.Client[test.HelloRequest, test.HelloResponse]
}

// HelloWord calls stream.HelloService.HelloWord.
func (c *helloServiceClient) HelloWord(ctx context.Context, req *connect_go.Request[test.HelloRequest]) (*connect_go.ServerStreamForClient[test.HelloResponse], error) {
	return c.helloWord.CallServerStream(ctx, req)
}

// HelloServiceHandler is an implementation of the stream.HelloService service.
type HelloServiceHandler interface {
	HelloWord(context.Context, *connect_go.Request[test.HelloRequest], *connect_go.ServerStream[test.HelloResponse]) error
}

// NewHelloServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewHelloServiceHandler(svc HelloServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle("/stream.HelloService/HelloWord", connect_go.NewServerStreamHandler(
		"/stream.HelloService/HelloWord",
		svc.HelloWord,
		opts...,
	))
	return "/stream.HelloService/", mux
}

// UnimplementedHelloServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedHelloServiceHandler struct{}

func (UnimplementedHelloServiceHandler) HelloWord(context.Context, *connect_go.Request[test.HelloRequest], *connect_go.ServerStream[test.HelloResponse]) error {
	return connect_go.NewError(connect_go.CodeUnimplemented, errors.New("stream.HelloService.HelloWord is not implemented"))
}
